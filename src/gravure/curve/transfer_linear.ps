%!PS

% Copyright (C) 2012 Atelier Obscur.
% Authors:
% Gilles Coissac <dev@atelierobscur.org>
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of version 2 of the GNU General Public License
% as published by the Free Software Foundation.
%
% This program is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
% or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
% for more details.
%
% You should have received a copy of the GNU General Public License with
% the Debian GNU/Linux distribution in file /usr/share/common-licenses/GPL;
% if not, write to the Free Software Foundation, Inc., 51 Franklin St,
% Fifth Floor, Boston, MA 02110-1301, USA.
%

/grv_transfer
{
  % Dot Gain Table
  % REF VALUE | MEASURED GAIN VALUE
  % Define tables x,y(x) by any number of entries.
  % Values for x=0.0 and x=1.0 are compulsary.
  /Tab
  [ 0.00  0.00  %   0% White
%    0.02  0.02  %   2%
%    0.04  0.04  %   4%
%    0.06  0.06  %   6%
%    0.08  0.08  %   8%
%    0.10  0.10  %  10%
%    0.15  0.15  %  15%
%    0.20  0.20  %  20%
%    0.30  0.30  %  30%
%    0.40  0.40  %  40%
%    0.45  0.45  %  45%
     0.50  0.70  %  50%
%    0.55  0.55  %  55%
%    0.60  0.60  %  60%
%    0.70  0.70  %  70%
%    0.80  0.80  %  80%
%    0.85  0.85  %  85%
%    0.90  0.90  %  90%
%    0.92  0.92  %  92%
%    0.94  0.94  %  94%
%    0.96  0.96  %  96%
%    0.98  0.98  %  98%
    1.00  1.00 % 100% Black
  ] def

  % convert from grey postcript
  % value to % ink coverage
  /cvink {1 exch sub} def

  % reverse table order and
  % reverse (x,y) value pair
  % to guess corrected value
  % from input value.
  /tab_reverse
  {
    /tmp_tab exch def
    tmp_tab aload length
    0 2 3 -1 roll 1 sub {
      /pos exch def
      tmp_tab exch pos exch put
      tmp_tab exch pos 1 add exch put
    } for
  } def

  % convert soustractiv input table
  % to postscript additiv values
  /to_additiv_tab
  {
    /tmp_tab exch def
    0 1 tmp_tab length 1 sub
    {
      dup
      tmp_tab exch get cvink
      tmp_tab 3 1 roll put
    } for
  } def

  % Linear interpolation function
  % guess value from table
  % with (x,y) value pair
  /get_y
  {
    /tab_length Tab length 1 sub def
    /ib 0 def
    % stack -> input_val
    {
      /ib ib 2 add def             % ib = ib + 2
      ib tab_length gt {exit} if   % if ib>tab_length : exit loop
      dup                          % stack -> input_val | input_val
      Tab ib get le {exit} if      % if input_val<=tab[ib] : exit loop
    } loop                         % loop keep index position in /ib

    % stack -> input_val
    Tab ib 2 sub get sub     % (input_val - Tab[ib-2])
    Tab ib 1 add get         % *
    Tab ib 1 sub get sub mul % (Tab[ib+1] - Tab[ib-1])
    Tab ib get               % stack -> resultat | Tab[ib]
    Tab ib 2 sub get sub     % Tab[ib] - Tab[ib-2]
    div                      % resultat / resultat2
    Tab ib 1 sub get add     % + Tab[ib-1]
  } def

  Tab to_additiv_tab
  Tab tab_reverse
  get_y
} def
