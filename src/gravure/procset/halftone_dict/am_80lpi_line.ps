%!PS 


[ 			% Put a mark on the stack
  currenttransfer 	% Put the current transfer function on the stack
  aload pop		% Unload the function
   {			% Put our function on the stack

      	/ExecTab { 
		  /xi exch def 
		  /tb Tab length 1 sub def 
		  /ib 0 def
	 		{/ib ib 2 add def
  		 		ib tb gt {exit} if  
  		 		xi Tab ib get le {exit} if
			} loop 
  		 		xi Tab ib 2 sub get sub Tab ib 1 add get Tab ib 1 sub get sub mul 
    	  			Tab ib get Tab ib 2 sub get sub div Tab ib 1 sub get add 
	} def

 	% Define tables x,y(x) by any number of entries.
 	% Values for x=0.0 and x=1.0 are compulsary.
 	/Tab % Gray Correction Table - REF VALUE Â¦ CORR VALUE
 	 [  0.00  0.00	% Black	  100%
		0.01  0.22353	%  99%
		0.02  0.25490	%  98%
		0.04  0.29020	%  96% 
		0.06  0.32549	%  94% 
 	  	0.08  0.35686	%  92%
		0.10  0.38824	%  90%
		0.15  0.44314	%  85%
 	 	0.20  0.48627	%  80%
 	 	0.30  0.57647	%  70%
 	 	0.40  0.64706	%  60%
		0.45  0.69804	%  55%
 	 	0.50  0.72157	%  50%
 	 	0.55  0.75686	%  45%
 	 	0.60  0.78824	%  40%	
 	 	0.70  0.86275	%  30%
 	 	0.80  0.91765	%  20%
 	 	0.85  0.94510	%  15%
		0.90  0.97255	%  10%
		0.92  0.98439	%   8%
 	 	0.94  0.98824	%   6%
		0.96  0.99216	%   4%
		0.98  0.99608	%   2%
 	     1.00  1.00 % White     0%
	  ] def

  	  ExecTab 
   }   			% End of our transfer fucntion

  aload pop		% Unload our function 
] 			% Create the array from the combined fcn. contents
cvx 			% Convert it to executable (i.e. to a proc)
settransfer		% Make the concatenated fcns our new xfer fcn







